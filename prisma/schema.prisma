generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider    = "postgresql"
    url         = env("DATABASE_URL")
    directUrl   = env("DIRECT_URL")
}





model University {
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    id          String    @id @default(cuid())

    domain      String    @unique // "... .edu"
    name        String
    color       String
    users       User[]    
} 



model User {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    password            String
    salt                String

    username            String              @unique
    email               String              @unique
    displayName         String
    pfpKey              String              @default("")
    bio                 String              @default("")

    universityId        String?
    university          University?         @relation(fields: [universityId], references: [id])

    verified            Boolean             @default(false)

    posts               Post[]              @relation("UserPost")

    // All posts a user has liked
    likes               Like[]              @relation("UserLikes")

    followerCount       Int                 @default(0)
    followers           Follow[]            @relation("Following")

    followingCount      Int                 @default(0)
    following           Follow[]            @relation("Followers")

    blocks              Block[]             @relation("UserBlocks")
    blockedBy           Block[]             @relation("BlockedBy")

    // All reports this user has made on posts
    reports             PostReport[]        @relation("Reporter")

    // Auth tokens issued to a user. ALL tokens in the array are valid
    authTokens          AuthToken[]         @relation("UserAuthToken")
    // Reset password tokens issued to a user. Only the last token in the array is valid.
    rpTokens            RPToken[]           @relation("UserRPToken")

    deleted             Boolean             @default(false)

    banned              Boolean             @default(false)
    banExpiration       DateTime?
    banMsg              String?
}



model Follow {
    id                  String              @id @default(cuid())
    createdAt           DateTime            @default(now())

    followerId          String
    follower            User                @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

    followingId         String
    following           User                @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}



model Block {
    id                  String              @id @default(cuid())
    createdAt           DateTime            @default(now())
    
    blockerId           String
    blocker             User                @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
    
    blockedId           String
    blocked             User                @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

    @@unique([blockerId, blockedId])
    @@index([blockerId])
    @@index([blockedId])
}



model Post {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    // Seller who posted the post
    authorId            String
    author              User                @relation("UserPost", fields: [authorId], references: [id], onDelete: Cascade)

    // Has the post been deleted?
    deleted             Boolean             @default(false)

    // All reports this post has gotten
    reports             PostReport[]        @relation("ReportedPost")

    content             String
    media               String[]
    hasLocation         Boolean
    lat                 Decimal?
    lng                 Decimal?
    pinned              Boolean             @default(false)

    likeCount           Int                 @default(0)
    likes               Like[]              @relation("PostLikes")

    replyToId           String?             // ID of the post this post is replying to
    replyTo             Post?               @relation("PostReplies", fields: [replyToId], references: [id])

    replyCount          Int                 @default(0)
    replies             Post[]              @relation("PostReplies")

    // Root post: Empty
    // Reply post: Contains all direct ancestor posts. First post is the root
    threadPosts         Post[]              @relation("ThreadPosts")

    // Unused
    // Stores all the posts that have this post as an ancestor
    threadOf            Post[]              @relation("ThreadPosts")
}



// A user's like on a post.
// Separate model to improve database operations and lookups.
model Like {
    id                 String              @id @default(cuid())
    createdAt          DateTime            @default(now())
    
    userId             String
    user               User                @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
    
    postId             String
    post               Post                @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@index([postId])
    @@index([userId])
}



// Account activation tokens, sent by email
model ActivateToken {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    token               String              @unique

    // The amount of (unsuccessful) times a user has tried to use this activate token to activate account
    // If too many are attempted, most likely a malicious user is guessing - mark the token as expired
    // "expired" is not to be used in any other context, tokens are automatcially deleted after a set time
    attempts            Int                 @default(0)
    expired             Boolean             @default(false)

    email               String              @unique
}



// Token given to users to authorize account actions
model AuthToken {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    token               String              @unique

    userId              String
    user                User                @relation("UserAuthToken", fields: [userId], references: [id], onDelete: Cascade)
}



// Token send to a user's email to reset password
model RPToken {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    token               String

    userId              String
    user                User                @relation("UserRPToken", fields: [userId], references: [id], onDelete: Cascade)
}



// Reporter is required, but if an account is deleted the reports still are available in the database (hence the "?"s)
model PostReport {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    msg                 String

    reporterId          String?
    reporter            User?               @relation("Reporter", fields: [reporterId], references: [id], onDelete: SetNull)

    reportedPostId      String
    reportedPost        Post                @relation("ReportedPost", fields: [reportedPostId], references: [id], onDelete: Cascade)
}





// Admin schemas are not used in-app; cannot be used to login.
model Admin {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    password            String
    salt                String

    email               String              @unique

    authTokens          AdminAuthToken[]    @relation("AdminAuthToken")
}



model AdminAuthToken {
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    id                  String              @id @default(cuid())

    token               String              @unique

    reqTimestamps       String[]

    adminId             String
    admin               Admin               @relation("AdminAuthToken", fields: [adminId], references: [id], onDelete: Cascade)
}